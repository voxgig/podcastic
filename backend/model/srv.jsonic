
&: $.sys.shape.srv.std_ts


monitor: {
  in: {
    aim: monitor: {}
  }
  api: req: { active: false }
  env: lambda: active: true
}


auth: {
  in: {
    aim: auth: {}
    aim: req: on: auth: {}
  }

  api: req: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


user: {
  in: {
    aim: user: {}
    aim: req: on: user: {}
  }

  api: req: path: { area: 'private/', suffix: ''  }
  env: lambda: active: true
}


entity: {
  in: {
    aim: entity: {}
    aim: req: on: entity: {}
  }

  api: req: path: { area: 'private/', suffix: ''  }
  env: lambda: active: true
}


chat: {
  in: {
    aim: chat: {}
    aim: req: on: chat: {}
  }

  api: req: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


widget: {
  in: {
    aim: widget: {}
    aim: req: on: widget: {}
  }

  api: req: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


ingest: {
  in: {
    aim: ingest: {}
  }
  out: {
    aim: ingest: {
      transcribe: episode: {}
      embed: chunk: {}
      store: embed: {}
    }
  }

  on: file: {
    provider: aws
    events: [
      {
        source: s3
        bucket: 'podmind01-backend01-transcript01-${self:provider.stage}'
        event: 's3:ObjectCreated:*'
        rules: prefix: 'folder01/audio01'
        msg: 'aim:ingest,transcribe:episode'
      },
      {
        source: s3
        bucket: 'podmind01-backend01-transcript01-${self:provider.stage}'
        event: 's3:ObjectCreated:*'
        rules: prefix: 'folder01/transcript01'
        msg: 'aim:ingest,handle:transcript'
      }
    ]
  }

  api: req: path: { active: false  }
  env: lambda: active: true
}



