
&: $.sys.shape.srv.std_ts


monitor: {
  in: {
    aim: monitor: {}
  }
  api: web: { active: false }
  env: lambda: active: true
  repl: active: true
  user: required: false
  
  deps: {
    auth: {}
    user: {}
    entity: {}
    chat: {}
    ingest: {}
    store: {}
  }
}


auth: {
  in: {
    aim: auth: {}
    aim: req: on: auth: {}
  }
  user: required: true
  api: web: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


user: {
  in: {
    aim: user: {}
    aim: req: on: user: {}
  }
  user: required: true
  api: web: path: { area: 'private/', suffix: ''  }
  env: lambda: active: true
}


entity: {
  in: {
    aim: entity: {}
    aim: req: on: entity: {}
  }
  user: required: true
  api: web: path: { area: 'private/', suffix: ''  }
  env: lambda: active: true
}


chat: {
  in: {
    aim: chat: {}
    aim: req: on: chat: {}
  }
  user: required: true
  api: web: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


widget: {
  in: {
    aim: widget: {}
    aim: req: on: widget: {}
  }
  user: required: false
  api: web: path: { area: 'public/', suffix: ''  }
  env: lambda: active: true
}


ingest: {
  in: {
    aim: ingest: {}
  }
  out: {
    aim: store: {
      handle: audio: {}
    }
    aim: ingest: {
      transcribe: episode: {}
      embed: chunk: {}
      store: embed: {}
    }
  }

  on: ingest: {
    provider: aws
    events: [
      # {
      #   source: sqs
      #   qrn: QueueAimIngestTranscribeEpisode
      # }
      # {
      #   source: sqs
      #   qrn: QueueAimIngestEmbedChunk
      # }
      # {
      #   source: sqs
      #   qrn: QueueAimIngestStoreEmbed
      # }
      # {
      #   source: s3
      #   bucket: 'podmind01-backend01-file01-${self:provider.stage}'
      #   event: 's3:ObjectCreated:*'
      #   rules: prefix: 'folder01/audio01'
      #   msg: 'aim:ingest,transcribe:episode'
      # }
      # {
      #   source: s3
      #   bucket: 'podmind01-backend01-file01-${self:provider.stage}'
      #   event: 's3:ObjectCreated:*'
      #   rules: prefix: 'folder01/transcript01'
      #   msg: 'aim:ingest,handle:transcript'
      # }
    ]
  }

  user: required: false
  repl: active: true
  api: web: active: false
  env: lambda: {
    active: true
    timeout: 888
    memory: 2048
  }

}



store: {
  in: {
    aim: store: {}
  }

  on: ingest: {
    provider: aws
    events: [
      {
        source: sqs
        qrn: QueueAimStoreHandleAudio
      }
    ]
  }

  user: required: false
  repl: active: true
  api: web: active: false
  env: lambda: {
    active: true
    timeout: 888
    memory: 2048
  }

}



